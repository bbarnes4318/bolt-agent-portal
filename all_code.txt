

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\aggregate_code.js ---

const fs = require('fs').promises;
const path = require('path');

async function aggregateCode(dir, outputFile) {
  let content = '';

  async function traverseDir(currentPath) {
    const files = await fs.readdir(currentPath);

    for (const file of files) {
      const filePath = path.join(currentPath, file);
      const stats = await fs.stat(filePath);

      // Skip unwanted directories and files
      if (stats.isDirectory()) {
        if (['node_modules', '.git', 'dist'].includes(file)) {
          continue; // Skip these directories
        }
        await traverseDir(filePath); // Recurse into the directory
      } else if (stats.isFile()) {
        const ext = path.extname(file).toLowerCase();
        // Skip specific files
        if (['package-lock.json', 'yarn.lock', 'npm-shrinkwrap.json'].includes(file)) {
          continue; // Skip package lock and other lock files
        }
        // Include only specific file extensions
        if (['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.json', '.md', '.mjs', '.txt'].includes(ext)) {
          content += `\n\n--- ${filePath} ---\n\n`;
          content += await fs.readFile(filePath, 'utf8');
        }
      }
    }
  }

  await traverseDir(dir);
  await fs.writeFile(outputFile, content);
  console.log(`Code aggregated in ${outputFile}`);
}

// Define the directory path
const directoryPath = path.join('C:', 'Users', 'Jimbo', 'Desktop', 'bolt-agent-portal');

// Usage
aggregateCode(directoryPath, 'all_code.txt');


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ACA Agent Portal</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\package.json ---

{
  "name": "bolt-agent-portal",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "start": "npm run build && node server.cjs"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-table": "^7.8.0",
    "xlsx": "^0.18.5",
    "date-fns": "^2.30.0",
    "@heroicons/react": "^2.0.18",
    "clsx": "^2.0.0",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "node-fetch": "^2.6.1",
    "vite": "^4.4.5",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.3"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7"
  },
  "engines": {
    "node": "18.x"
  }
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\README.md ---

# bolt-agent-portal

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\App.jsx ---

import { useState } from 'react'
import CallHistory from './components/CallHistory'
import CallFlowControl from './components/CallFlowControl'

export default function App() {
  const [isActive, setIsActive] = useState(false)

  return (
    <div className="min-h-screen p-4 md:p-6">
      <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-2xl md:text-3xl font-bold text-center mb-8">
          ACA Agent Call History and Management Portal
        </h1>
        
        <CallFlowControl isActive={isActive} onToggle={setIsActive} />
        <CallHistory />
      </div>
    </div>
  )
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\components\CallFlowControl.jsx ---

import { useState } from 'react'
import clsx from 'clsx'

export default function CallFlowControl({ isActive, onToggle }) {
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  const handleToggle = async (newState) => {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/target/status', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ enabled: newState })
      });

      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to update status');
      }

      onToggle(newState);
      console.log(`Button turned ${newState ? 'ON' : 'OFF'} successfully.`);
    } catch (err) {
      setError(err.message);
      console.error('Error updating status:', err);
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="flex flex-col items-center space-y-4">
      <div className="flex space-x-4">
        <button
          onClick={() => handleToggle(true)}
          disabled={isLoading || isActive}
          className={clsx(
            "px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-200",
            isActive 
              ? "bg-orange-500 text-white opacity-50 cursor-not-allowed"
              : isLoading
                ? "bg-orange-300 text-white cursor-wait"
                : "bg-orange-500 text-white hover:bg-orange-600 active:bg-orange-700"
          )}
        >
          {isLoading ? "Loading..." : "Start"}
        </button>
        <button
          onClick={() => handleToggle(false)}
          disabled={isLoading || !isActive}
          className={clsx(
            "px-8 py-4 rounded-lg font-semibold text-lg transition-all duration-200",
            !isActive
              ? "bg-gray-300 text-gray-500 cursor-not-allowed"
              : isLoading
                ? "bg-gray-400 text-white cursor-wait"
                : "bg-gray-600 text-white hover:bg-gray-700 active:bg-gray-800"
          )}
        >
          {isLoading ? "Loading..." : "Pause"}
        </button>
      </div>
      
      <div className="text-xl font-medium">
        Status: {" "}
        <span className={clsx(
          "font-semibold",
          isActive ? "text-green-600" : "text-gray-600"
        )}>
          {isActive ? "Currently Available" : "Paused"}
        </span>
      </div>

      {error && (
        <div className="mt-2 text-red-600 text-sm">
          {error}
        </div>
      )}
    </div>
  )
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\components\CallHistory.jsx ---

import { useState } from 'react'
import { format } from 'date-fns'
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/solid'

export default function CallHistory({ isLoading, error, calls = [] }) {
  return (
    <div className="space-y-4">
      {error && (
        <div className="p-4 bg-red-50 text-red-600 rounded-lg">
          {error}
        </div>
      )}

      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Call Date
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Buyer
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Target
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Caller ID
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Duration
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Enrollment
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Recording
              </th>
            </tr>
          </thead>
          <tbody>
            {isLoading ? (
              <tr>
                <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                  Loading call history...
                </td>
              </tr>
            ) : calls.length === 0 ? (
              <tr>
                <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                  No call history available
                </td>
              </tr>
            ) : (
              calls.map((call, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-4 py-3 text-sm border-b">
                    {format(new Date(call.callDt), 'MM/dd/yyyy HH:mm')}
                  </td>
                  <td className="px-4 py-3 text-sm border-b">{call.buyer}</td>
                  <td className="px-4 py-3 text-sm border-b">{call.targetName}</td>
                  <td className="px-4 py-3 text-sm border-b">{call.inboundPhoneNumber}</td>
                  <td className="px-4 py-3 text-sm border-b">
                    {Math.floor(call.callLengthInSeconds / 60)}:{String(call.callLengthInSeconds % 60).padStart(2, '0')}
                  </td>
                  <td className="px-4 py-3 text-sm border-b text-center">
                    {call.hasConverted ? (
                      <CheckCircleIcon className="w-6 h-6 text-green-500 mx-auto" />
                    ) : (
                      <XCircleIcon className="w-6 h-6 text-red-500 mx-auto" />
                    )}
                  </td>
                  <td className="px-4 py-3 text-sm border-b">
                    {call.recordingUrl && (
                      <a 
                        href={call.recordingUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800"
                      >
                        Play
                      </a>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #FF8200;
}

body {
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
}

.button {
  @apply px-6 py-3 rounded-lg font-medium transition-colors;
}

.button-primary {
  @apply bg-[#FF8200] text-white hover:bg-opacity-90;
}

.button-secondary {
  @apply bg-gray-100 text-gray-600 hover:bg-gray-200;
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\main.jsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\services\ringbaApi.js ---

export async function updateTargetStatus(enabled) {
  try {
    const response = await fetch('/api/target/status', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ enabled })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error updating target status:', error);
    throw error;
  }
}

export async function fetchCallLogs() {
  try {
    const response = await fetch('/api/calllogs');

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.calls || [];
  } catch (error) {
    console.error('Error fetching call logs:', error);
    throw error;
  }
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\vite.config.js ---

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    chunkSizeWarningLimit: 1000,
  }
})
