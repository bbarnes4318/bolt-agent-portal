go fuck yourself. You make sure the god damn code is correct. I've included the ALL OF THE APPLICATION CODES BELOW. Slow down for five minutes and actually look through each. This way, you will catch all the errors and correct your errors. Please reply back with the 100% updated and completed codes of any that need updated: I am concerned that the following is impacting this application: 

Option 1: Use "type": "module" in package.json
Open your package.json file.
Add or update the "type" field to "module":
{
  "type": "module"
}
Save the file and run your script again.

Option 2: Use CommonJS Syntax
If you prefer to keep using CommonJS, you can replace import statements with require:

PLEASE CHECK ALL CODES AND MAKE SURE THIS GETS CORRECTED. 


*ALL CODES BELOW:

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\aggregate_code.js ---

const fs = require('fs').promises;
const path = require('path');

async function aggregateCode(dir, outputFile) {
  let content = '';

  async function traverseDir(currentPath) {
    const files = await fs.readdir(currentPath);

    for (const file of files) {
      const filePath = path.join(currentPath, file);
      const stats = await fs.stat(filePath);

      // Skip unwanted directories and files
      if (stats.isDirectory()) {
        if (['node_modules', '.git', 'dist'].includes(file)) {
          continue; // Skip these directories
        }
        await traverseDir(filePath); // Recurse into the directory
      } else if (stats.isFile()) {
        const ext = path.extname(file).toLowerCase();
        // Skip specific files
        if (['package-lock.json', 'yarn.lock', 'npm-shrinkwrap.json'].includes(file)) {
          continue; // Skip package lock and other lock files
        }
        // Include only specific file extensions
        if (['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.json', '.md', '.mjs', '.txt'].includes(ext)) {
          content += `\n\n--- ${filePath} ---\n\n`;
          content += await fs.readFile(filePath, 'utf8');
        }
      }
    }
  }

  await traverseDir(dir);
  await fs.writeFile(outputFile, content);
  console.log(`Code aggregated in ${outputFile}`);
}

// Define the directory path here
const directoryPath = path.join('C:', 'Users', 'Jimbo', 'Desktop', 'bolt-agent-portal');
const outputFilePath = path.join('C:', 'Users', 'Jimbo', 'Desktop', 'bolt-agent-portal', 'all_code.txt');

// Usage
aggregateCode(directoryPath, outputFilePath);


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>ACA Agent Portal</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\package.json ---

{
  "name": "bolt-agent-portal",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "start": "npm run build && node server.cjs"
  },
  "dependencies": {
    "@heroicons/react": "^2.0.18",
    "autoprefixer": "^10.4.16",
    "clsx": "^2.0.0",
    "cors": "^2.8.5",
    "date-fns": "^2.30.0",
    "express": "^4.18.2",
    "node-fetch": "^2.6.1",
    "postcss": "^8.4.31",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-table": "^7.8.0",
    "tailwindcss": "^3.3.3",
    "vite": "^4.4.5",
    "xlsx": "^0.18.5",
    "@vitejs/plugin-react": "^4.3.3"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7"
  },
  "engines": {
    "node": "18.x"
  }
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\README.md ---

# bolt-agent-portal

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\App.jsx ---

import { useState } from 'react'
import CallHistory from './components/CallHistory'
import CallFlowControl from './components/CallFlowControl'

export default function App() {
  const [isActive, setIsActive] = useState(false)

  return (
    <div className="min-h-screen p-4 md:p-6">
      <div className="max-w-7xl mx-auto bg-white rounded-lg shadow-sm p-6">
        <h1 className="text-2xl md:text-3xl font-bold text-center mb-8">
          ACA Agent Call History and Management Portal
        </h1>
        
        <CallFlowControl isActive={isActive} onToggle={setIsActive} />
        <CallHistory />
      </div>
    </div>
  )
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\components\CallFlowControl.jsx ---

import { useState, useEffect } from 'react';
import { updateTargetStatus } from '../services/ringbaApi';
import '../styles/CustomStyles.css'; // Import your custom styles

export default function CallFlowControl() {
  const [isActive, setIsActive] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    updateTime();
    const timeInterval = setInterval(updateTime, 1000);
    return () => clearInterval(timeInterval);
  }, []);

  // Function to update the time
  const updateTime = () => {
    const now = new Date();
    document.getElementById('currentTime').textContent = now.toLocaleTimeString();
  };

  // Function to handle Start and Pause
  const handleToggle = async (newState) => {
    setError(null);
    try {
      // Call Ringba API
      const response = await updateTargetStatus(newState);
      if (!response) throw new Error('Failed to update status');
      setIsActive(newState);
      showSystemStatus(newState ? 'System Activated' : 'System Paused');
    } catch (err) {
      setError(err.message);
    }
  };

  // Function to show system status
  const showSystemStatus = (message) => {
    const status = document.getElementById('systemStatus');
    status.textContent = message;
    status.classList.add('active');
    setTimeout(() => status.classList.remove('active'), 2000);
  };

  return (
    <div className="dashboard">
      <div className="hero-image"></div>
      <div className="grid-background"></div>
      <div className="pulse-rings">
        <div className="pulse-ring"></div>
        <div className="pulse-ring" style={{ animationDelay: '1s' }}></div>
        <div className="pulse-ring" style={{ animationDelay: '2s' }}></div>
      </div>

      <div className="header">
        {/* Use the image from the public folder */}
        <img src="/400x120.png" alt="ACA Health Insurance Portal Logo" className="logo" width="400" height="120" />
        <div className="time" id="currentTime"></div>
      </div>

      <div className="control-buttons">
        <button
          className="btn"
          onClick={() => handleToggle(true)}
          disabled={isActive}
          style={{ opacity: isActive ? '0.7' : '1' }}
        >
          Start Lead Flow
        </button>
        <button
          className="btn"
          onClick={() => handleToggle(false)}
          disabled={!isActive}
          style={{ background: '#333', opacity: !isActive ? '0.7' : '1' }}
        >
          Pause System
        </button>
      </div>

      {error && <div className="error-message">{error}</div>}

      <div className="system-status" id="systemStatus"></div>
      <div className="energy-field" id="energyField"></div>
    </div>
  );
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\components\CallHistory.jsx ---

import { useState } from 'react'
import { format } from 'date-fns'
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/solid'

export default function CallHistory({ isLoading, error, calls = [] }) {
  return (
    <div className="space-y-4">
      {error && (
        <div className="p-4 bg-red-50 text-red-600 rounded-lg">
          {error}
        </div>
      )}

      <div className="overflow-x-auto">
        <table className="w-full">
          <thead>
            <tr>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Call Date
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Buyer
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Target
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Caller ID
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Duration
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Enrollment
              </th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-600 bg-gray-50 border-b">
                Recording
              </th>
            </tr>
          </thead>
          <tbody>
            {isLoading ? (
              <tr>
                <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                  Loading call history...
                </td>
              </tr>
            ) : calls.length === 0 ? (
              <tr>
                <td colSpan="7" className="px-4 py-8 text-center text-gray-500">
                  No call history available
                </td>
              </tr>
            ) : (
              calls.map((call, index) => (
                <tr key={index} className="hover:bg-gray-50">
                  <td className="px-4 py-3 text-sm border-b">
                    {format(new Date(call.callDt), 'MM/dd/yyyy HH:mm')}
                  </td>
                  <td className="px-4 py-3 text-sm border-b">{call.buyer}</td>
                  <td className="px-4 py-3 text-sm border-b">{call.targetName}</td>
                  <td className="px-4 py-3 text-sm border-b">{call.inboundPhoneNumber}</td>
                  <td className="px-4 py-3 text-sm border-b">
                    {Math.floor(call.callLengthInSeconds / 60)}:{String(call.callLengthInSeconds % 60).padStart(2, '0')}
                  </td>
                  <td className="px-4 py-3 text-sm border-b text-center">
                    {call.hasConverted ? (
                      <CheckCircleIcon className="w-6 h-6 text-green-500 mx-auto" />
                    ) : (
                      <XCircleIcon className="w-6 h-6 text-red-500 mx-auto" />
                    )}
                  </td>
                  <td className="px-4 py-3 text-sm border-b">
                    {call.recordingUrl && (
                      <a 
                        href={call.recordingUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800"
                      >
                        Play
                      </a>
                    )}
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  )
}

--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --primary: #ff8200;
  --secondary: #d3d3d3;
}

body {
  @apply bg-gray-50 font-sans;
}

.button-primary {
  @apply px-6 py-3 bg-[#ff8200] text-white rounded-lg shadow hover:shadow-lg;
}

.button-secondary {
  @apply px-6 py-3 bg-gray-300 text-gray-700 rounded-lg shadow hover:shadow-md;
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\main.jsx ---

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\services\ringbaApi.js ---

// ringbaApi.js

import fetch from 'node-fetch';

// Function to update the target status through Ringba API
export async function updateTargetStatus(enabled) {
  try {
    const response = await fetch('https://api.ringba.com/v2/targets/update', { // Update the URL as needed for your API endpoint
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer YOUR_API_KEY_HERE` // Make sure to replace 'YOUR_API_KEY_HERE' with your actual API key
      },
      body: JSON.stringify({ enabled })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error updating target status:', error);
    throw error;
  }
}

// Function to fetch call logs from Ringba API
export async function fetchCallLogs() {
  try {
    const response = await fetch('https://api.ringba.com/v2/calllogs', { // Update the URL as needed for your API endpoint
      method: 'GET',
      headers: {
        'Authorization': `Bearer YOUR_API_KEY_HERE`, // Make sure to replace 'YOUR_API_KEY_HERE' with your actual API key
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    return data.calls || [];
  } catch (error) {
    console.error('Error fetching call logs:', error);
    throw error;
  }
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\src\styles\CustomStyles.css ---

/* src/styles/CustomStyles.css */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: #000000;
  font-family: 'Roboto', -apple-system, sans-serif;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 2rem;
  overflow-x: hidden;
  color: #ffffff;
}

.hero-image {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-image: url('../assets/Untitled (1250 × 650 px).png');
  background-size: cover;
  background-position: center;
  opacity: 0.15;
  filter: grayscale(50%) sepia(20%);
  mix-blend-mode: overlay;
  z-index: 1;
}

.grid-background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: 
    linear-gradient(rgba(255, 130, 0, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 130, 0, 0.1) 1px, transparent 1px);
  background-size: 30px 30px;
  transform: perspective(500px) rotateX(60deg);
  transform-origin: top;
  animation: gridMove 20s linear infinite;
  opacity: 0.4;
  z-index: 0;
}

@keyframes gridMove {
  from { background-position: 0 0; }
  to { background-position: 0 30px; }
}

.pulse-ring {
  position: fixed;
  top: 50%;
  left: 50%;
  width: 500px;
  height: 500px;
  border: 2px solid #ff8200;
  border-radius: 50%;
  transform: translate(-50%, -50%);
  animation: pulsate 4s ease-out infinite;
  opacity: 0;
}

@keyframes pulsate {
  0% { transform: translate(-50%, -50%) scale(0.1); opacity: 1; }
  100% { transform: translate(-50%, -50%) scale(2); opacity: 0; }
}

.dashboard {
  background: rgba(0, 0, 0, 0.85);
  backdrop-filter: blur(15px);
  border: 1px solid #ff8200;
  border-radius: 20px;
  padding: 2rem;
  min-width: 800px;
  position: relative;
  z-index: 3;
  margin-top: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.control-buttons {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.btn {
  background: #ff8200;
  color: #ffffff;
  border: none;
  padding: 1rem 2rem;
  border-radius: 5px;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: 0.5s;
}

.btn:hover::before {
  left: 100%;
}

.system-status {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0);
  font-size: 4rem;
  color: #ff8200;
  text-transform: uppercase;
  font-weight: bold;
  z-index: 100;
  text-align: center;
  opacity: 0;
  transition: all 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

.system-status.active {
  transform: translate(-50%, -50%) scale(1);
  opacity: 1;
}

.energy-field {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.5s ease;
}

.energy-field.active {
  opacity: 1;
}

.particle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: #ff8200;
  border-radius: 50%;
  pointer-events: none;
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\tailwind.config.js ---

// tailwind.config.js
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


--- C:\Users\Jimbo\Desktop\bolt-agent-portal\vite.config.js ---

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    chunkSizeWarningLimit: 1000,
  }
})
